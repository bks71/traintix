// Code generated by MockGen. DO NOT EDIT.
// Source: internal/inventory/api.go

// Package inventory is a generated GoMock package.
package inventory

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInventoryService is a mock of InventoryService interface.
type MockInventoryService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceMockRecorder
}

// MockInventoryServiceMockRecorder is the mock recorder for MockInventoryService.
type MockInventoryServiceMockRecorder struct {
	mock *MockInventoryService
}

// NewMockInventoryService creates a new mock instance.
func NewMockInventoryService(ctrl *gomock.Controller) *MockInventoryService {
	mock := &MockInventoryService{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService) EXPECT() *MockInventoryServiceMockRecorder {
	return m.recorder
}

// Purchase mocks base method.
func (m *MockInventoryService) Purchase(firstName, lastName, email string) (Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purchase", firstName, lastName, email)
	ret0, _ := ret[0].(Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Purchase indicates an expected call of Purchase.
func (mr *MockInventoryServiceMockRecorder) Purchase(firstName, lastName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockInventoryService)(nil).Purchase), firstName, lastName, email)
}
