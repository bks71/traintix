// Code generated by MockGen. DO NOT EDIT.
// Source: server/reservations/api.go

// Package reservations is a generated GoMock package.
package reservations

import (
	reflect "reflect"

	pb "github.com/bks71/traintix/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockReservationSystem is a mock of ReservationSystem interface.
type MockReservationSystem struct {
	ctrl     *gomock.Controller
	recorder *MockReservationSystemMockRecorder
}

// MockReservationSystemMockRecorder is the mock recorder for MockReservationSystem.
type MockReservationSystemMockRecorder struct {
	mock *MockReservationSystem
}

// NewMockReservationSystem creates a new mock instance.
func NewMockReservationSystem(ctrl *gomock.Controller) *MockReservationSystem {
	mock := &MockReservationSystem{ctrl: ctrl}
	mock.recorder = &MockReservationSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationSystem) EXPECT() *MockReservationSystemMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockReservationSystem) CancelReservation(arg0 *pb.Passenger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockReservationSystemMockRecorder) CancelReservation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockReservationSystem)(nil).CancelReservation), arg0)
}

// ChangeSeat mocks base method.
func (m *MockReservationSystem) ChangeSeat(arg0 *pb.Passenger, arg1 *pb.Seat) (*pb.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSeat", arg0, arg1)
	ret0, _ := ret[0].(*pb.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSeat indicates an expected call of ChangeSeat.
func (mr *MockReservationSystemMockRecorder) ChangeSeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSeat", reflect.TypeOf((*MockReservationSystem)(nil).ChangeSeat), arg0, arg1)
}

// GetReservation mocks base method.
func (m *MockReservationSystem) GetReservation(arg0 *pb.Passenger) (*pb.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", arg0)
	ret0, _ := ret[0].(*pb.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockReservationSystemMockRecorder) GetReservation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockReservationSystem)(nil).GetReservation), arg0)
}

// GetReservationsBySection mocks base method.
func (m *MockReservationSystem) GetReservationsBySection(sectionName string) []*pb.Reservation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsBySection", sectionName)
	ret0, _ := ret[0].([]*pb.Reservation)
	return ret0
}

// GetReservationsBySection indicates an expected call of GetReservationsBySection.
func (mr *MockReservationSystemMockRecorder) GetReservationsBySection(sectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsBySection", reflect.TypeOf((*MockReservationSystem)(nil).GetReservationsBySection), sectionName)
}

// ReserveSeat mocks base method.
func (m *MockReservationSystem) ReserveSeat(arg0 *pb.Passenger) (*pb.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveSeat", arg0)
	ret0, _ := ret[0].(*pb.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveSeat indicates an expected call of ReserveSeat.
func (mr *MockReservationSystemMockRecorder) ReserveSeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveSeat", reflect.TypeOf((*MockReservationSystem)(nil).ReserveSeat), arg0)
}
